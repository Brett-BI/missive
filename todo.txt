# Missive
# Flask app with an endpoint at /sms (or any other single endpoint) to handle Twilio texts
    > Handle incoming text messages:
        - + 1h Get cheese from Wegmans [123-123-1234;123-123-1235]
        - + 06032020:0830 Take car to the shop [me]
        - ? 05032020 <list all reminders for the day> [me]
        - - 123456 <remove task of id: 123456>

# Twilio account with a single phone number to receive texts

# design pattern: chain of responsiblity or visitor
# cor: client > handler > class1/class2/class3

# syntax

! 
Show all active reminders (with ID)

! [<period>]
List all reminders within the time period (with ID)

+ <time>[;<time2>] "<message>" <number>[;<number2>]
Add a new reminder

? help
Show simple help instructions

?
Check that the service is running

- <reminder>
Remove the active reminder from the list (by ID)


Approach:
classes
    - top-level request
        # meta information (to, from, msg, etc.; basically the info in the Twilio request)
            - getters & setters
        # have children inherit the basic information and extend for all other functionality (except a few, maybe?)
    - (+) add reminder (inherits from request)
        - import the parser
        - methods for each action (might have to work out overloading methods)
    - (?) information reminder (inherits from request)
    - (-) remove reminder (inherits from request)
    - (!) display reminder (inherits from request)
    - top level parser
        # various methods for extracting information from message bodies
# request handler
    # invokes +/-/? classes
# error handler
    # does Flask have enough of this functionality baked in? Is it better to handle errors within each module (probably)?
# DB handler
    # handles all the DB storage for incoming/outgoing messages, reminders, etc.
# send message handler
    # handles all of the sms messaging