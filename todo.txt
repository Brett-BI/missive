# Missive

- Handle requests with multiple reminders
    > throw any reminders after the first away automatically
    > ask the user which reminder they would like to keep
    > prompt the user if he/she would like to create multiple missives for each reminder (keeping the receivers and times)
- Get all subclasses of the Parser written (with tests)
    > !
    > -
    > ?
- Write the logic for the handler for all actions (with tests)
    > Maybe create a class for the Handler so it can be instantiated with each new request?

Handler
    > add, remove, info, etc.
    > create classes for db interfacing, task scheduling, etc.
        - subclass these for specific actions
    > Flow:
        1. Handler receives tasks
        2. Handler calls and instance of Parser to determine pathway
        3. Handler oversees the execution order of events for now
        4. The handler stays ugly.

DBHandler
    > subclass for +, -, !, etc.
Parser
    > subclass for +, -, !, etc.
Scheduler
Messager



# Flask app with an endpoint at /sms (or any other single endpoint) to handle Twilio texts
    > Handle incoming text messages:
        - + 1h Get cheese from Wegmans [123-123-1234;123-123-1235]
        - + 06032020:0830 Take car to the shop [me]
        - ? 05032020 <list all reminders for the day> [me]
        - - 123456 <remove task of id: 123456>

# Twilio account with a single phone number to receive texts

# design pattern: chain of responsiblity or visitor
# cor: client > handler > class1/class2/class3

# syntax

! 
Show all active reminders (with ID)

! [<period>]
List all reminders within the time period (with ID)

+ <@time>[<@time2>] "<message>" <#number>[;<#number2>]
Add a new reminder

+ @01-01-2020 12:30; "msg" <#number>[;][<#number2]
+ @01-01-2020|12:30@01-02-2020|12:00 "msg" #me
Multiple times
+ @d|8:00 "work" #me
Daily at 8:00
+ @w.|8:00 "work" #me
Every wednesday at 8:00
Jan. 1st 2020 at 12:30
+ @w 12:30
Next Wednesday at 12:30 (non-repeating)
+ @w+ 12:30
Every Wednesday at 12:30 (repeating)

? help
Show simple help instructions

?
Check that the service is running

- <reminder>
Remove the active reminder from the list (by ID)


Approach:
classes
    - top-level request
        # meta information (to, from, msg, etc.; basically the info in the Twilio request)
            - getters & setters
        # have children inherit the basic information and extend for all other functionality (except a few, maybe?)
    - (+) add reminder (inherits from request)
        - import the parser
        - methods for each action (might have to work out overloading methods)
    - (?) information reminder (inherits from request)
    - (-) remove reminder (inherits from request)
    - (!) display reminder (inherits from request)
    - top level parser
        # various methods for extracting information from message bodies
# request handler
    # invokes +/-/? classes
# error handler
    # does Flask have enough of this functionality baked in? Is it better to handle errors within each module (probably)?
# DB handler
    # handles all the DB storage for incoming/outgoing messages, reminders, etc.
# send message handler
    # handles all of the sms messaging