# Missive

- Handle requests with multiple reminders
    > throw any reminders after the first away automatically
    > ask the user which reminder they would like to keep
    > prompt the user if he/she would like to create multiple missives for each reminder (keeping the receivers and times)
- Get all subclasses of the Parser written (with tests)
    > !
    > -
    > ?
- Write the logic for the handler for all actions (with tests)
    > Maybe create a class for the Handler so it can be instantiated with each new request?

Handler
    > add, remove, info, etc.
    > create classes for db interfacing, task scheduling, etc.
        - subclass these for specific actions
    > Flow:
        1. Handler receives tasks
        2. Handler calls and instance of Parser to determine pathway
        3. Handler oversees the execution order of events for now
        4. The handler stays ugly.

DBHandler
    > subclass for +, -, !, etc.
Parser
    > subclass for +, -, !, etc.
Scheduler
Messager



# Flask app with an endpoint at /sms (or any other single endpoint) to handle Twilio texts
    > Handle incoming text messages:
        - + 1h Get cheese from Wegmans [123-123-1234;123-123-1235]
        - + 06032020:0830 Take car to the shop [me]
        - ? 05032020 <list all reminders for the day> [me]
        - - 123456 <remove task of id: 123456>

# Twilio account with a single phone number to receive texts

# design pattern: chain of responsiblity or visitor
# cor: client > handler > class1/class2/class3

# syntax

! 
Show all active reminders (with ID)

! [<period>]
List all reminders within the time period (with ID)

+ <@time>[<@time2>] "<message>" <#number>[;<#number2>]
Add a new reminder

+ @01-01-2020 12:30; "msg" <#number>[;][<#number2]
+ @01-01-2020|12:30@01-02-2020|12:00 "msg" #me
Multiple times
+ @d|8:00 "work" #me
Daily at 8:00
+ @w.|8:00 "work" #me
Every wednesday at 8:00
Jan. 1st 2020 at 12:30
+ @w 12:30
Next Wednesday at 12:30 (non-repeating)
+ @w+ 12:30
Every Wednesday at 12:30 (repeating)

? help
Show simple help instructions

?
Check that the service is running

- <reminder>
Remove the active reminder from the list (by ID)

'''
scheduler_bp
    > this needs methods that are not necessarily tied to routes at the moment
    > handles all scheduling tasks and processes
    > includes the web interface for managing scheduling/tasks/processes (not the same as the interface for users)
    > Functionality:
        - Add job
        - Remove job
        - Update job
        - View all jobs
        - Search jobs
'''

todo:
# scheduler
    > functionality (add, remove, update, view all, calculate time, etc.)
    > admin front-end
    > user front-end
        - the user will be creating jobs directly so the information doesn't have to be parsed in the same way the text messages do
# messenger
    > figure out security with Twilio services (so that info from this endpoint gets to Twilio in a secure way)
# sms request handler (handler + parser)
    > figure out security with Twilio (to make sure that only Twilio can send stuff to this endpoint)
# parser
    > ? functionality
    > figure out how to handle datetimes? (syntax that isn't stupid, maybe have strftime figure it out?)
# database for job store
# database for message/request info

Add support for time/datetime strings based on regex parsing:
# regex looks for time patterns: xx:xx || x:xx || x || x:xx:xxx || x:xx.xxx and matches them to an strptime format string
    > if regex doesn't find anything, the user's time format isn't supported, throw an error or something
    > if regex does find something, pass a list of dicts: [{time_string: '12', format:'%H'}]

scheduler is going to pull from the DB so there has to be a few tables, at least:
# missives
    > missive_id, requester_id (required to sign up to send messages), request_datetime, status
# missive_statuses
    > status_id, status_name, status_desc
# users
    > user_id, name, email, phone_number
# messages
    > message_id, missive_id, message
# times
    > time_id, missive_id, time (attach a timezone to this?)
# scheduled tasks (not sure how this one is going to work)
    > task_id, status